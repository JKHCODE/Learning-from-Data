load("~/.RData")
m=dim(matrix(0,2,2))
m
m=matrix(0,10,2)
m
m<-cbinds(rep(1,10),m)
m<-cbind(rep(1,10),m)
m
cbind(1,2)
cbind(1,2,3)
runif
setwd("~/Workspace/Learning-from-Data/classifier")
X
X<-matrix(c(1,2,3,4,5,6,7,8),4)
Y<-c(1,1,1,0)
HL<-c(4,3)
dx<-dim(X)
N<-dx[1]
mx<-dx[2]
# uses single output for this algorithm
my<-1
AL<-cbind(mx,HL,my) #All layers
# initialize all weights randomly
Weights<-list()
Theta<-list()
for(i in 1:length(HL)+1){
n<-AL[i+1]; m<-AL[i]+1
Weights[[i]]<-matrix(runif(n*m,-2,2),n,m)
Theta[[i]]<-rep(0,AL[i]+1)
}
}
X
AL
mx
HL
AL
X<-matrix(c(1,2,3,4,5,6,7,8),4)
Y<-c(1,1,1,0)
HL<-c(4,3)
dx<-dim(X)
N<-dx[1]
mx<-dx[2]
# uses single output for this algorithm
my<-1
AL<-c(mx,HL,my) #All layers
# initialize all weights randomly
Weights<-list()
Theta<-list()
for(i in 1:length(HL)+1){
n<-AL[i+1]; m<-AL[i]+1
Weights[[i]]<-matrix(runif(n*m,-2,2),n,m)
Theta[[i]]<-rep(0,AL[i]+1)
}
}
X
AL
Weights
AL
i<-1
Theta[[1]]<-c(1,X[i,])
j<-2
Theta[[j]][-1]<-tanh(Weigths[[j]]%*%Theta[[j-1]])
Weights
Theta[[j]][-1]<-tanh(Weights[[j]]%*%Theta[[j-1]])
Theta
Theta[[1]]
dim(Theta[[1]])
Weights[[2]]
Weights[[1]]
Weights
Theta
